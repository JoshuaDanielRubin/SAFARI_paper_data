
sys.setrecursionlimit(10000)

MAXVAL=0
#STEPS10=range(10, MAXVAL, 10)
STEPS10=[0]
STEPSMSA=["0"]
#LENGTHS=[str(i) for i in range(35, 76, 5)]
LENGTHS=["30", "35", "40", "50", "55", "60", "65"]
#LENGTHS=["30"]
RATES=["0.1", "0.15", "0.2", "0.25", "0.3", "0.35", "0.4", "0.45", "0.5", "0.55", "0.6", "0.65", "0.7", "0.75", "0.8", "0.85", "0.9", "0.95"]
#RATES=["0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9"]
DAMAGE=["dhigh", "dmid", "none", "single"]
ALIGNERS=["bowtie2", "mem", "aln_anc", "aln", "shrimp", "bb", "giraffe", "safari"]
#ALIGNERS=["giraffe", "safari"]
ALIGNERSC=[]
NUMFRAGS=5000
FRAGNUM=500

ruleorder: fragsim > deamsim
ruleorder: fragsim_numtS > deamsim_numtS

rule all:
    input:
        expand("simulations/gen_0.fa"),
        #expand("simulations/gen_{steps}.nw",steps=STEPS10),
        expand("simulations/gen_{steps}_n{nfrag}.fa.gz",steps=STEPSMSA,nfrag=NUMFRAGS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}.fa.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_adpt.fa",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE, length=LENGTHS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_s1.fq.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE, length=LENGTHS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_s2.fq.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE, length=LENGTHS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_o.fq.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE, length=LENGTHS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_o_s{rate}.fq.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/gen_{steps}_n{nfrag}_d{dam}_l{length}_o_r2_s{rate}.fq.gz",steps=STEPSMSA,nfrag=NUMFRAGS,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/numtS_n{fragn}.fa.gz",fragn=FRAGNUM),
        expand("simulations/numtS_n{fragn}_d{dam}.fa.gz",fragn=FRAGNUM,dam=DAMAGE),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_adpt.fa",fragn=FRAGNUM,dam=DAMAGE, length=LENGTHS),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_s1.fq.gz",fragn=FRAGNUM,dam=DAMAGE, length=LENGTHS),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_s2.fq.gz",fragn=FRAGNUM,dam=DAMAGE, length=LENGTHS),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_o.fq.gz",fragn=FRAGNUM,dam=DAMAGE, length=LENGTHS),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_o_s{rate}.fq.gz",fragn=FRAGNUM,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",fragn=FRAGNUM,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/numtS_n{fragn}_d{dam}_l{length}_o_r2_s{rate}.fq.gz",fragn=FRAGNUM,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES, length=LENGTHS),
        expand("simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES, length=LENGTHS),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_mem.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_aln.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_aln_anc.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_bowtie2.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_shrimp.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_vg.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_safari.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_bb.bam",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES),
        expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_{align}.stat",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES,align=ALIGNERS, length=LENGTHS),

        #expand("alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}.bam.bai",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES,align=ALIGNERS),
        #expand("consensus/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}_{cons}.fa.gz",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES,align=ALIGNERSC,cons=CONSENSUS),
        #expand("consensus/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}_{cons}.fa.nw",step=STEPSMSA,nfrags=NUMFRAGS,dam=DAMAGE,rate=RATES,align=ALIGNERSC,cons=CONSENSUS),
#        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o"
#        "simulations/all_prank.best.fas"
        #"simulations/all_mafft.fasta"


rule simulations_mt:
    input: "simulations/gen_0.fa"
    output: expand("simulations/gen_{idx}.fa", idx=range(1, MAXVAL+1))
    shell: "/home/projects/benchmarkmito/mitochondrialSimulator/mitochondrialSimulator.py -g {MAXVAL} -o simulations/gen --name=generation /home/projects/benchmarkmito/mitochondrialSimulator/rCRS_0_005.conf {input}"


for p in STEPS10:
    rule:
        input:
            input_1="simulations/gen_0.fa",
            input_2="simulations/gen_{param}.fa".format(param=p)
        output: "simulations/gen_{param}.nw".format(param=p)
        params:
            str(p),
            out_prefix="simulations/gen_{param}".format(param=p)
        shell: "/home/ctools/EMBOSS-6.6.0/emboss/needle -gapopen 10.0 -gapextend 0.5 -outfile {output} -asequence {input.input_1} -bsequence {input.input_2}"

rule runmsacat:
    input:  expand("simulations/gen_{idx}.fa",idx=STEPSMSA)
    output: "simulations/all.fasta"
    shell: "cat {input} > {output}"

#run mafft
rule runmafft:
    input:  "simulations/all.fasta"
    output:  "simulations/all_mafft.fasta"
    shell: "/storage/ctools/mafft-7.487-with-extensions/core/mafft-distance --auto {input} > {output}"

#run prank
rule runprank:
    input:  "simulations/all.fasta"
    output: "simulations/all_prank.best.fas"
    params:
        outprefix="simulations/all_prank"
    shell: "/home/ctools/prank-msa/src/prank -d={input} -showall -o={params.outprefix} -DNA"


rule faidx:
    input: "simulations/gen_{step}.fa"
    output: "simulations/gen_{step}.fa.fai"
    shell: "/home/ctools/samtools-1.13/samtools faidx {input}"

rule fragsim:
    input:
        input_1="simulations/gen_{step}.fa",
        input_2="simulations/gen_{step}.fa.fai"
    output:
        "simulations/gen_{step}_n{nfrags}.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/gargammel/src/fragSim  -n {wildcards.nfrags} -s \
         /home/projects2/DNA_reconstruct/gabrieldir/insertSizes/chagyrskaya8.gz --circ generation_{wildcards.step} {input.input_1} | gzip > {output}"


rule deamsim:
    input:
        "simulations/gen_{step}_n{nfrags}.fa.gz"
    output:
        "simulations/gen_{step}_n{nfrags}_d{dam}.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/gargammel/src/deamSim  -matfile {wildcards.dam}  {input} | gzip > {output}"

rule adptsim:
    input:
        "simulations/gen_{step}_n{nfrags}_d{dam}.fa.gz"
    output:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_adpt.fa"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/gargammel/src/adptSim   -l 125 -artp {output}  {input}"

rule art:
    input:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_adpt.fa"
    output:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s1.fq",
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s2.fq"
    wildcard_constraints:
        fraglen="\d+"
    params:
        out_prefix="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s"
    shell:
        "/home/ctools/gargammel/art_src_MountRainier_Linux/art_illumina -ss HS25 -amp -na -p -l {wildcards.length} -c 1   -i {input} -o {params.out_prefix}"

rule adptsimz:
    input:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_adpt.fa"
    output:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_adpt.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "gzip  {input}"

rule artz1:
    input:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s1.fq"
    output:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s1.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
       "gzip {input}"

rule artz2:
    input:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s2.fq"
    output:
        "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s2.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "gzip {input}"

rule trimmed:
    input:
        input_1="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s1.fq.gz",
        input_2="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_s2.fq.gz"
    output:
        output_1="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o.fq.gz",
        output_2="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1.fq.gz",
        output_3="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2.fq.gz"
    params:
        out_prefix="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools//leeHom-1.2.15/src/leeHom --ancientdna -fq1 {input.input_1} -fq2 {input.input_2} -fqo {params.out_prefix}"

rule subsamp_mt:
    input: "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o.fq.gz"
    output: "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools//seqtk-1.3/seqtk sample -s 321 {input} {wildcards.rate} |gzip > {output}"

rule subsamp_r1:
    input: "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1.fq.gz"
    output: "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools//seqtk-1.3/seqtk sample -s 321 {input} {wildcards.rate} |gzip > {output}"

rule subsamp_r2:
    input: "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2.fq.gz"
    output: "simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools//seqtk-1.3/seqtk sample -s 321 {input} {wildcards.rate} |gzip > {output}"

#same process for numtS

rule faidx_numtS:
    input: "simulations/numtS.fasta"
    output: "simulations/numtS.fasta.fai"
    shell: "/home/ctools/samtools-1.13/samtools faidx {input}"

rule fragsim_numtS:
    input:
        input_1="simulations/numtS.fasta",
        input_2="simulations/numtS.fasta.fai"
    output:
        "simulations/numtS_n{fragn}.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools//gargammel/src/fragSim  -n {wildcards.fragn} -s  /home/projects2/DNA_reconstruct/gabrieldir/insertSizes/chagyrskaya8.gz \
         {input.input_1} | gzip > {output}"


rule deamsim_numtS:
    input:
        "simulations/numtS_n{fragn}.fa.gz"
    output:
        "simulations/numtS_n{fragn}_d{dam}.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/gargammel/src/deamSim  -matfile {wildcards.dam}  {input} | gzip > {output}"


rule adptsim_numtS:
    input:
        "simulations/numtS_n{fragn}_d{dam}.fa.gz"
    output:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_adpt.fa"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/gargammel/src/adptSim   -l 125 -artp {output}  {input}"

rule art_numtS:
    input:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_adpt.fa"
    output:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_s1.fq",
        "simulations/numtS_n{fragn}_d{dam}_l{length}_s2.fq"
    wildcard_constraints:
        fraglen="\d+"
    params:
        out_prefix="simulations/numtS_n{fragn}_d{dam}_l{length}_s"
    shell:
        "/home/ctools/gargammel/art_src_MountRainier_Linux/art_illumina -ss HS25 -amp -na -p -l 125 -c 1   -i {input} -o {params.out_prefix}"


rule adptsimz_numtS:
    input:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_adpt.fa"
    output:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_adpt.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "gzip  {input}"


rule artz1_numtS:
    input:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_s1.fq"
    output:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_s1.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
       "gzip {input}"

rule artz2_numtS:
    input:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_s2.fq"
    output:
        "simulations/numtS_n{fragn}_d{dam}_l{length}_s2.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "gzip {input}"


rule trimmed_numtS:
    input:
        input_1="simulations/numtS_n{fragn}_d{dam}_l{length}_s1.fq.gz",
        input_2="simulations/numtS_n{fragn}_d{dam}_l{length}_s2.fq.gz"
    output:
        output_1="simulations/numtS_n{fragn}_d{dam}_l{length}_o.fq.gz",
    	output_2="simulations/numtS_n{fragn}_d{dam}_l{length}_o_r1.fq.gz",
    	output_3="simulations/numtS_n{fragn}_d{dam}_l{length}_o_r2.fq.gz"
    params:
        out_prefix="simulations/numtS_n{fragn}_d{dam}_l{length}_o"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/leeHom-1.2.15/src/leeHom --ancientdna -fq1 {input.input_1} -fq2 {input.input_2} -fqo {params.out_prefix}"


rule subsamp_numtS:
    input: "simulations/numtS_n{fragn}_d{dam}_l{length}_o.fq.gz"
    output: "simulations/numtS_n{fragn}_d{dam}_l{length}_o_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s 321 {input} {wildcards.rate} |gzip > {output}"

rule subsamp_numtS_r1:
    input: "simulations/numtS_n{fragn}_d{dam}_l{length}_o_r1.fq.gz"
    output: "simulations/numtS_n{fragn}_d{dam}_l{length}_o_r1_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s 321 {input} {wildcards.rate} |gzip > {output}"

rule subsamp_numtS_r2:
    input: "simulations/numtS_n{fragn}_d{dam}_l{length}_o_r2.fq.gz"
    output: "simulations/numtS_n{fragn}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s 321 {input} {wildcards.rate} |gzip > {output}"

rule concat_seqtk:
    input:
        input_1="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz"
    output: "simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "cat {input.input_1} {input.input_2} bacteria/simulations/refSoil_n100000_d{wildcards.dam}_o_s{wildcards.rate}.fq.gz > {output}"

rule concat_seqtk_r1:
    input:
        input_1="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_2="simulations/numtS_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz"
    output: "simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "cat {input.input_1} {input.input_2} bacteria/simulations/refSoil_n100000_d{wildcards.dam}_o_r1_s{wildcards.rate}.fq.gz > {output}"

rule concat_seqtk_r2:
    input:
        input_1="simulations/gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz",
        input_2="simulations/numtS_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell: "cat {input.input_1} {input.input_2} bacteria/simulations/refSoil_n100000_d{wildcards.dam}_o_r2_s{wildcards.rate}.fq.gz > {output}"

# mapping to the reference 

#bwa mem
rule bwa:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_mem.bam"
    wildcard_constraints:
        fraglen="\d+"
    shell: "/home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3} | /home/ctools/bwa-0.7.17/bwa mem -r 2.5 -k 19 -p \
            simulations/gen_0.fa  /dev/stdin | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}" 


#aln
rule aln:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_aln.bam" 
    shell: "cat <(/home/ctools/bwa-0.7.17/bwa aln simulations/gen_0.fa {input.input_1} | \
            /home/ctools/bwa-0.7.17/bwa samse simulations/gen_0.fa /dev/stdin {input.input_1}) \
            <(/home/ctools/bwa-0.7.17/bwa sampe simulations/gen_0.fa <(/home/ctools/bwa-0.7.17/bwa aln simulations/gen_0.fa {input.input_2}) \
            <(/home/ctools/bwa-0.7.17/bwa aln simulations/gen_0.fa {input.input_3}) {input.input_2} {input.input_3}  | \
            /home/ctools/samtools-1.13/samtools view -S /dev/stdin) | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"


#aln_anc
rule alnanc:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_aln_anc.bam"
    shell: "cat <(/home/ctools/bwa-0.7.17/bwa aln -n 0.02 -o 2 -l 1024 simulations/gen_0.fa {input.input_1} \
            | /home/ctools/bwa-0.7.17/bwa samse simulations/gen_0.fa /dev/stdin {input.input_1}) <(/home/ctools/bwa-0.7.17/bwa sampe simulations/gen_0.fa \
            <(/home/ctools/bwa-0.7.17/bwa aln -n 0.02 -o 2 -l 1024 simulations/gen_0.fa {input.input_2}) \
            <(/home/ctools/bwa-0.7.17/bwa aln -n 0.02 -o 2 -l 1024 simulations/gen_0.fa {input.input_3}) {input.input_2} {input.input_3} \
            | /home/ctools/samtools-1.13/samtools view -S /dev/stdin) | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"

##bowtie2
rule bowtie2:
    input: 
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_bowtie2.bam"
    shell: "/home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3}  | \
            /home/ctools/bowtie2-2.4.4/bowtie2 --end-to-end --sensitive \
            -x bowtie2index/gen_0.fa --interleaved /dev/stdin | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"


##SHRiMP
rule SHRiMP:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_shrimp.bam"
    shell: "cat <(/home/ctools/SHRiMP_2_2_2/bin/gmapper -N 1 -o 1 --single-best-mapping --sam-unaligned \
            --fastq --sam --no-qv-check --qv-offset 33 {input.input_1} simulations/gen_0.fa) <(/home/ctools/SHRiMP_2_2_2/bin/gmapper -N 1 \
            -o 1 --single-best-mapping --sam-unaligned --fastq --sam --no-qv-check --qv-offset 33 -1 {input.input_2} -2 {input.input_3} \
            simulations/gen_0.fa | /home/ctools/samtools-1.13/samtools view -S /dev/stdin) | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"


##safari
#nice -19 /home/projects/MAAG/Magpie/Magpie/vgan_corrected/dep/vg/bin/vg filter -m 3 - | \

rule safari:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_safari.bam"
    benchmark: "benchmarks/safari_numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}.tsv"
    shell: "nice -19 /home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3} | \
            /home/projects/MAAG/Magpie/Magpie/vgan_corrected/dep/vg/bin/vg giraffe \
           --deam-3p /home/projects/MAAG/Magpie/Magpie/dhigh3p.prof --deam-5p /home/projects/MAAG/Magpie/Magpie/dhigh5p.prof \
           -t 3 \
           -f /dev/stdin \
           -j 0.9 \
           -D 50 \
           -m  /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.min \
           -d /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.dist \
           -q /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.ry \
           -Z /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.giraffe.gbz | \
           nice -19 /home/projects/MAAG/Magpie/Magpie/vgan_corrected/dep/vg/bin/vg surject -l -P -A \
                    -x /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.xg \
           -t 3 -p H2a2a1 -b - \
           > {output}"


##giraffe
rule giraffe:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_giraffe.bam"
    benchmark: "benchmarks/giraffe_numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}.tsv"
    shell: "nice -19 /home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3} | \
            /home/projects/MAAG/Magpie/Magpie/vg_uncorrected/bin/vg giraffe \
           -t 3 \
           -f /dev/stdin \
           -m  /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.min \
           -d /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.dist \
           -Z /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.giraffe.gbz | \
           nice -19 /home/projects/MAAG/Magpie/Magpie/vgan_corrected/dep/vg/bin/vg surject -l -P -A \
                    -x /home/projects/MAAG/Magpie/Magpie/vgan_corrected/share/vgan/hcfiles/graph.xg \
           -t 3 -p H2a2a1 -b - \
           > {output}"

#vg mapping
rule vgmapping:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_vg.bam"
    shell: "/home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3} | /home/ctools/vg_1.33.0/vg map -i -f /dev/stdin -d /home/projects/benchmarkmito/vgindex/gen_0 | /home/ctools/vg_1.33.0/vg surject -x /home/projects/benchmarkmito/vgindex/gen_0.vg -b /dev/stdin | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"


#bbmap
rule bbmap:
    input:
        input_1="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_s{rate}.fq.gz",
        input_2="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r1_s{rate}.fq.gz",
        input_3="simulations/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_o_r2_s{rate}.fq.gz"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_bb.bam" 
    shell: "cat <(/home/ctools/bbmap_38_91/bbmap.sh sam=1.3 qin=33 ref=simulations/gen_0.fa nodisk=t in={input.input_1} out=/dev/stdout) \
            <(/home/ctools/bbmap_38_91/bbmap.sh sam=1.3 qin=33 ref=simulations/gen_0.fa nodisk=t in={input.input_2} in2={input.input_3} out=/dev/stdout \
             | /home/ctools/samtools-1.13/samtools view -S /dev/stdin) | /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"

rule stat:
    input: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_{align}.bam"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_l{length}_s{rate}_{align}.stat"
    shell: "python parseBamMito.py  alignments/numtS_and_gen_0_n{wildcards.nfrags}_d{wildcards.dam}_l{wildcards.length}_s{wildcards.rate}_{wildcards.align}.bam > alignments/numtS_and_gen_{wildcards.step}_n{wildcards.nfrags}_d{wildcards.dam}_l{wildcards.length}_s{wildcards.rate}_{wildcards.align}.stat"

rule mpileup:
    input: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}.bam"
    output: "consensus/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}_mpileup.fa.gz"
    params:
        out_prefix="consensus/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}_mpileup.fa.gz"
    shell: "/home/ctools/bcftools-1.13/bcftools mpileup -Ou -f  simulations/gen_0.fa {input} |/home/ctools/bcftools-1.13/bcftools call -c --ploidy 1 |bgzip -c > {params.out_prefix}.vcf.gz && /home/ctools/bcftools-1.13/bcftools index {params.out_prefix}.vcf.gz  && cat simulations/gen_0.fa | /home/ctools/bcftools-1.13/bcftools consensus -M N -a N {params.out_prefix}.vcf.gz |gzip > {output}"#-M N -a N means add Ns to missing sites


rule bamindex:
    input: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}.bam"
    output: "alignments/numtS_and_gen_{step}_n{nfrags}_d{dam}_s{rate}_{align}.bam.bai"
    shell: "/home/ctools/samtools-1.13/samtools index {input}  {output}"

